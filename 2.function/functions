In Python, a **function** is a reusable block of code designed to perform a specific task. 
Functions allow you to write modular code, make it more readable, and avoid repetition. Python has both **built-in functions** (like `print()`, `len()`) and **user-defined functions** that you can create.


# simple to write function:

# decleare variable
a = 2
b = 4

# define function
def sub():
  sub = (a + b)
  print(sub)

#invoke function
sub()


# EXPLANATION

two variables, a and b, are declared and assigned the values 2 and 4, respectively. 
These variables are global variables, meaning they can be accessed from anywhere in the script, including within functions.

### 1. **Defining a Function**
To define a function in Python, you use the `def` keyword followed by the function name, parentheses `()`, and a colon `:`. The code inside the function must be indented.

#### Syntax:
```python
def function_name(parameters):
    # Function body
    return value  # Optional return statement
```

### 2. **Calling a Function**
After defining a function, you can call it by writing the function name followed by parentheses, with arguments if needed.

#### Example:
```python
def greet():
    print("Hello, world!")

greet()  # Calling the function
```

### 3. **Function with Parameters**
Functions can accept parameters (also called arguments) that allow you to pass data into the function.

#### Example:
```python
def greet(name):
    print(f"Hello, {name}!")

greet("Alice")  # Output: Hello, Alice!
```

### 4. **Function with Return Value**
Functions can return a value using the `return` statement. This allows you to store the result in a variable or use it directly.

#### Example:
```python
def add(a, b):
    return a + b

result = add(5, 3)
print(result)  # Output: 8
```

### 5. **Default Parameters**
You can provide default values to parameters. If the caller doesn't provide a value, the default value will be used.

#### Example:
```python
def greet(name="Guest"):
    print(f"Hello, {name}!")

greet()       # Output: Hello, Guest!
greet("Bob")  # Output: Hello, Bob!
```

### 6. **Keyword Arguments**
Python allows you to call functions using keyword arguments, which lets you specify the argument names.

#### Example:
```python
def person_info(name, age):
    print(f"Name: {name}, Age: {age}")

person_info(age=30, name="John")  # Output: Name: John, Age: 30
```

### 7. **Arbitrary Arguments (`*args` and `**kwargs`)**
- **`*args`**: Allows you to pass a variable number of non-keyword arguments to a function.
- **`**kwargs`**: Allows you to pass a variable number of keyword arguments to a function.

#### Example with `*args`:
```python
def add_numbers(*args):
    return sum(args)

print(add_numbers(1, 2, 3, 4))  # Output: 10
```

#### Example with `**kwargs`:
```python
def print_info(**kwargs):
    for key, value in kwargs.items():
        print(f"{key}: {value}")

print_info(name="Alice", age=25, city="New York")
```

### 8. **Lambda Functions**
A **lambda function** is a small anonymous function that can have any number of arguments but only one expression. It’s typically used for short, simple operations.

#### Example:
```python
# Syntax: lambda arguments: expression
add = lambda x, y: x + y
print(add(5, 3))  # Output: 8
```

### 9. **Higher-Order Functions**
Functions can accept other functions as arguments or return them. These are called **higher-order functions**.

#### Example:
```python
def apply_function(func, value):
    return func(value)

result = apply_function(lambda x: x ** 2, 5)  # Output: 25
print(result)
```

### 10. **Recursive Functions**
A **recursive function** is a function that calls itself. It’s useful for tasks that can be broken down into similar sub-tasks, such as calculating the factorial of a number.

#### Example:
```python
def factorial(n):
    if n == 1:
        return 1
    return n * factorial(n - 1)

print(factorial(5))  # Output: 120
```

### 11. **Built-in Functions**
Python includes a number of built-in functions that you can use without having to define them:
- **`print()`**: Outputs text to the screen.
- **`len()`**: Returns the length of a string, list, or other iterable.
- **`max()` and `min()`**: Return the largest and smallest items in an iterable.
- **`sum()`**: Returns the sum of all items in an iterable.
- **`type()`**: Returns the type of an object.

### 12. **Docstrings**
You can add documentation to functions using **docstrings**. These are useful to describe what the function does, its parameters, and its return values.

#### Example:
```python
def add(a, b):
    """
    This function adds two numbers.
    :param a: First number
    :param b: Second number
    :return: Sum of a and b
    """
    return a + b

print(add.__doc__)  # Output: This function adds two numbers.
```

### Summary:
Functions in Python allow you to organize your code into reusable blocks. You can pass data to functions using parameters, and they can return values using the `return` statement. With concepts like `*args`, `**kwargs`, lambda functions, and recursion, Python's functions are versatile tools for a wide range of programming tasks.
